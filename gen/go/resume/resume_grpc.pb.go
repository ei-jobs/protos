// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.3
// source: resume/resume.proto

package resumev1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ResumeService_GetResume_FullMethodName         = "/resume.ResumeService/GetResume"
	ResumeService_GetResumeByUserId_FullMethodName = "/resume.ResumeService/GetResumeByUserId"
	ResumeService_ListResume_FullMethodName        = "/resume.ResumeService/ListResume"
	ResumeService_CreateResume_FullMethodName      = "/resume.ResumeService/CreateResume"
	ResumeService_UpdateResume_FullMethodName      = "/resume.ResumeService/UpdateResume"
	ResumeService_DeleteResume_FullMethodName      = "/resume.ResumeService/DeleteResume"
)

// ResumeServiceClient is the client API for ResumeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ResumeServiceClient interface {
	GetResume(ctx context.Context, in *GetResumeRequest, opts ...grpc.CallOption) (*GetResumeResponse, error)
	GetResumeByUserId(ctx context.Context, in *GetResumeByUserIdRequest, opts ...grpc.CallOption) (*GetResumeByUserIdResponse, error)
	ListResume(ctx context.Context, in *ListResumeRequest, opts ...grpc.CallOption) (*ListResumeResponse, error)
	CreateResume(ctx context.Context, in *CreateResumeRequest, opts ...grpc.CallOption) (*CreateResumeResponse, error)
	UpdateResume(ctx context.Context, in *UpdateResumeRequest, opts ...grpc.CallOption) (*UpdateResumeResponse, error)
	DeleteResume(ctx context.Context, in *DeleteResumeRequest, opts ...grpc.CallOption) (*DeleteResumeResponse, error)
}

type resumeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewResumeServiceClient(cc grpc.ClientConnInterface) ResumeServiceClient {
	return &resumeServiceClient{cc}
}

func (c *resumeServiceClient) GetResume(ctx context.Context, in *GetResumeRequest, opts ...grpc.CallOption) (*GetResumeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetResumeResponse)
	err := c.cc.Invoke(ctx, ResumeService_GetResume_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resumeServiceClient) GetResumeByUserId(ctx context.Context, in *GetResumeByUserIdRequest, opts ...grpc.CallOption) (*GetResumeByUserIdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetResumeByUserIdResponse)
	err := c.cc.Invoke(ctx, ResumeService_GetResumeByUserId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resumeServiceClient) ListResume(ctx context.Context, in *ListResumeRequest, opts ...grpc.CallOption) (*ListResumeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListResumeResponse)
	err := c.cc.Invoke(ctx, ResumeService_ListResume_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resumeServiceClient) CreateResume(ctx context.Context, in *CreateResumeRequest, opts ...grpc.CallOption) (*CreateResumeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateResumeResponse)
	err := c.cc.Invoke(ctx, ResumeService_CreateResume_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resumeServiceClient) UpdateResume(ctx context.Context, in *UpdateResumeRequest, opts ...grpc.CallOption) (*UpdateResumeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateResumeResponse)
	err := c.cc.Invoke(ctx, ResumeService_UpdateResume_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resumeServiceClient) DeleteResume(ctx context.Context, in *DeleteResumeRequest, opts ...grpc.CallOption) (*DeleteResumeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteResumeResponse)
	err := c.cc.Invoke(ctx, ResumeService_DeleteResume_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ResumeServiceServer is the server API for ResumeService service.
// All implementations must embed UnimplementedResumeServiceServer
// for forward compatibility.
type ResumeServiceServer interface {
	GetResume(context.Context, *GetResumeRequest) (*GetResumeResponse, error)
	GetResumeByUserId(context.Context, *GetResumeByUserIdRequest) (*GetResumeByUserIdResponse, error)
	ListResume(context.Context, *ListResumeRequest) (*ListResumeResponse, error)
	CreateResume(context.Context, *CreateResumeRequest) (*CreateResumeResponse, error)
	UpdateResume(context.Context, *UpdateResumeRequest) (*UpdateResumeResponse, error)
	DeleteResume(context.Context, *DeleteResumeRequest) (*DeleteResumeResponse, error)
	mustEmbedUnimplementedResumeServiceServer()
}

// UnimplementedResumeServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedResumeServiceServer struct{}

func (UnimplementedResumeServiceServer) GetResume(context.Context, *GetResumeRequest) (*GetResumeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetResume not implemented")
}
func (UnimplementedResumeServiceServer) GetResumeByUserId(context.Context, *GetResumeByUserIdRequest) (*GetResumeByUserIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetResumeByUserId not implemented")
}
func (UnimplementedResumeServiceServer) ListResume(context.Context, *ListResumeRequest) (*ListResumeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListResume not implemented")
}
func (UnimplementedResumeServiceServer) CreateResume(context.Context, *CreateResumeRequest) (*CreateResumeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateResume not implemented")
}
func (UnimplementedResumeServiceServer) UpdateResume(context.Context, *UpdateResumeRequest) (*UpdateResumeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateResume not implemented")
}
func (UnimplementedResumeServiceServer) DeleteResume(context.Context, *DeleteResumeRequest) (*DeleteResumeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteResume not implemented")
}
func (UnimplementedResumeServiceServer) mustEmbedUnimplementedResumeServiceServer() {}
func (UnimplementedResumeServiceServer) testEmbeddedByValue()                       {}

// UnsafeResumeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ResumeServiceServer will
// result in compilation errors.
type UnsafeResumeServiceServer interface {
	mustEmbedUnimplementedResumeServiceServer()
}

func RegisterResumeServiceServer(s grpc.ServiceRegistrar, srv ResumeServiceServer) {
	// If the following call pancis, it indicates UnimplementedResumeServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ResumeService_ServiceDesc, srv)
}

func _ResumeService_GetResume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetResumeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResumeServiceServer).GetResume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResumeService_GetResume_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResumeServiceServer).GetResume(ctx, req.(*GetResumeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResumeService_GetResumeByUserId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetResumeByUserIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResumeServiceServer).GetResumeByUserId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResumeService_GetResumeByUserId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResumeServiceServer).GetResumeByUserId(ctx, req.(*GetResumeByUserIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResumeService_ListResume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListResumeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResumeServiceServer).ListResume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResumeService_ListResume_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResumeServiceServer).ListResume(ctx, req.(*ListResumeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResumeService_CreateResume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateResumeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResumeServiceServer).CreateResume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResumeService_CreateResume_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResumeServiceServer).CreateResume(ctx, req.(*CreateResumeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResumeService_UpdateResume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateResumeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResumeServiceServer).UpdateResume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResumeService_UpdateResume_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResumeServiceServer).UpdateResume(ctx, req.(*UpdateResumeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResumeService_DeleteResume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteResumeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResumeServiceServer).DeleteResume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResumeService_DeleteResume_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResumeServiceServer).DeleteResume(ctx, req.(*DeleteResumeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ResumeService_ServiceDesc is the grpc.ServiceDesc for ResumeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ResumeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "resume.ResumeService",
	HandlerType: (*ResumeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetResume",
			Handler:    _ResumeService_GetResume_Handler,
		},
		{
			MethodName: "GetResumeByUserId",
			Handler:    _ResumeService_GetResumeByUserId_Handler,
		},
		{
			MethodName: "ListResume",
			Handler:    _ResumeService_ListResume_Handler,
		},
		{
			MethodName: "CreateResume",
			Handler:    _ResumeService_CreateResume_Handler,
		},
		{
			MethodName: "UpdateResume",
			Handler:    _ResumeService_UpdateResume_Handler,
		},
		{
			MethodName: "DeleteResume",
			Handler:    _ResumeService_DeleteResume_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "resume/resume.proto",
}
