// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.3
// source: company/company.proto

package companyv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CompanyService_ListCompany_FullMethodName          = "/company.CompanyService/ListCompany"
	CompanyService_GetCompany_FullMethodName           = "/company.CompanyService/GetCompany"
	CompanyService_ListCompanyProduct_FullMethodName   = "/company.CompanyService/ListCompanyProduct"
	CompanyService_CreateCompanyProduct_FullMethodName = "/company.CompanyService/CreateCompanyProduct"
	CompanyService_UpdateCompanyProduct_FullMethodName = "/company.CompanyService/UpdateCompanyProduct"
	CompanyService_DeleteCompanyProduct_FullMethodName = "/company.CompanyService/DeleteCompanyProduct"
	CompanyService_ListCompanyReviews_FullMethodName   = "/company.CompanyService/ListCompanyReviews"
	CompanyService_CreateCompanyReview_FullMethodName  = "/company.CompanyService/CreateCompanyReview"
	CompanyService_ListProductReviews_FullMethodName   = "/company.CompanyService/ListProductReviews"
	CompanyService_CreateProductReview_FullMethodName  = "/company.CompanyService/CreateProductReview"
)

// CompanyServiceClient is the client API for CompanyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CompanyServiceClient interface {
	ListCompany(ctx context.Context, in *ListCompanyRequest, opts ...grpc.CallOption) (*ListCompanyResponse, error)
	GetCompany(ctx context.Context, in *GetCompanyRequest, opts ...grpc.CallOption) (*GetCompanyResponse, error)
	ListCompanyProduct(ctx context.Context, in *ListCompanyProductRequest, opts ...grpc.CallOption) (*ListCompanyProductResponse, error)
	CreateCompanyProduct(ctx context.Context, in *CreateCompanyProductRequest, opts ...grpc.CallOption) (*CreateCompanyProductResponse, error)
	UpdateCompanyProduct(ctx context.Context, in *UpdateCompanyProductRequest, opts ...grpc.CallOption) (*UpdateCompanyProductResponse, error)
	DeleteCompanyProduct(ctx context.Context, in *DeleteCompanyProductRequest, opts ...grpc.CallOption) (*DeleteCompanyProductResponse, error)
	ListCompanyReviews(ctx context.Context, in *ListCompanyReviewsRequest, opts ...grpc.CallOption) (*ListCompanyReviewsResponse, error)
	CreateCompanyReview(ctx context.Context, in *CreateCompanyReviewRequest, opts ...grpc.CallOption) (*CreateCompanyReviewResponse, error)
	ListProductReviews(ctx context.Context, in *ListProductReviewsRequest, opts ...grpc.CallOption) (*ListProductReviewsResponse, error)
	CreateProductReview(ctx context.Context, in *CreateProductReviewRequest, opts ...grpc.CallOption) (*CreateProductReviewResponse, error)
}

type companyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCompanyServiceClient(cc grpc.ClientConnInterface) CompanyServiceClient {
	return &companyServiceClient{cc}
}

func (c *companyServiceClient) ListCompany(ctx context.Context, in *ListCompanyRequest, opts ...grpc.CallOption) (*ListCompanyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListCompanyResponse)
	err := c.cc.Invoke(ctx, CompanyService_ListCompany_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServiceClient) GetCompany(ctx context.Context, in *GetCompanyRequest, opts ...grpc.CallOption) (*GetCompanyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCompanyResponse)
	err := c.cc.Invoke(ctx, CompanyService_GetCompany_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServiceClient) ListCompanyProduct(ctx context.Context, in *ListCompanyProductRequest, opts ...grpc.CallOption) (*ListCompanyProductResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListCompanyProductResponse)
	err := c.cc.Invoke(ctx, CompanyService_ListCompanyProduct_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServiceClient) CreateCompanyProduct(ctx context.Context, in *CreateCompanyProductRequest, opts ...grpc.CallOption) (*CreateCompanyProductResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateCompanyProductResponse)
	err := c.cc.Invoke(ctx, CompanyService_CreateCompanyProduct_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServiceClient) UpdateCompanyProduct(ctx context.Context, in *UpdateCompanyProductRequest, opts ...grpc.CallOption) (*UpdateCompanyProductResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateCompanyProductResponse)
	err := c.cc.Invoke(ctx, CompanyService_UpdateCompanyProduct_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServiceClient) DeleteCompanyProduct(ctx context.Context, in *DeleteCompanyProductRequest, opts ...grpc.CallOption) (*DeleteCompanyProductResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteCompanyProductResponse)
	err := c.cc.Invoke(ctx, CompanyService_DeleteCompanyProduct_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServiceClient) ListCompanyReviews(ctx context.Context, in *ListCompanyReviewsRequest, opts ...grpc.CallOption) (*ListCompanyReviewsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListCompanyReviewsResponse)
	err := c.cc.Invoke(ctx, CompanyService_ListCompanyReviews_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServiceClient) CreateCompanyReview(ctx context.Context, in *CreateCompanyReviewRequest, opts ...grpc.CallOption) (*CreateCompanyReviewResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateCompanyReviewResponse)
	err := c.cc.Invoke(ctx, CompanyService_CreateCompanyReview_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServiceClient) ListProductReviews(ctx context.Context, in *ListProductReviewsRequest, opts ...grpc.CallOption) (*ListProductReviewsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListProductReviewsResponse)
	err := c.cc.Invoke(ctx, CompanyService_ListProductReviews_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServiceClient) CreateProductReview(ctx context.Context, in *CreateProductReviewRequest, opts ...grpc.CallOption) (*CreateProductReviewResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateProductReviewResponse)
	err := c.cc.Invoke(ctx, CompanyService_CreateProductReview_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CompanyServiceServer is the server API for CompanyService service.
// All implementations must embed UnimplementedCompanyServiceServer
// for forward compatibility.
type CompanyServiceServer interface {
	ListCompany(context.Context, *ListCompanyRequest) (*ListCompanyResponse, error)
	GetCompany(context.Context, *GetCompanyRequest) (*GetCompanyResponse, error)
	ListCompanyProduct(context.Context, *ListCompanyProductRequest) (*ListCompanyProductResponse, error)
	CreateCompanyProduct(context.Context, *CreateCompanyProductRequest) (*CreateCompanyProductResponse, error)
	UpdateCompanyProduct(context.Context, *UpdateCompanyProductRequest) (*UpdateCompanyProductResponse, error)
	DeleteCompanyProduct(context.Context, *DeleteCompanyProductRequest) (*DeleteCompanyProductResponse, error)
	ListCompanyReviews(context.Context, *ListCompanyReviewsRequest) (*ListCompanyReviewsResponse, error)
	CreateCompanyReview(context.Context, *CreateCompanyReviewRequest) (*CreateCompanyReviewResponse, error)
	ListProductReviews(context.Context, *ListProductReviewsRequest) (*ListProductReviewsResponse, error)
	CreateProductReview(context.Context, *CreateProductReviewRequest) (*CreateProductReviewResponse, error)
	mustEmbedUnimplementedCompanyServiceServer()
}

// UnimplementedCompanyServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCompanyServiceServer struct{}

func (UnimplementedCompanyServiceServer) ListCompany(context.Context, *ListCompanyRequest) (*ListCompanyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCompany not implemented")
}
func (UnimplementedCompanyServiceServer) GetCompany(context.Context, *GetCompanyRequest) (*GetCompanyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCompany not implemented")
}
func (UnimplementedCompanyServiceServer) ListCompanyProduct(context.Context, *ListCompanyProductRequest) (*ListCompanyProductResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCompanyProduct not implemented")
}
func (UnimplementedCompanyServiceServer) CreateCompanyProduct(context.Context, *CreateCompanyProductRequest) (*CreateCompanyProductResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCompanyProduct not implemented")
}
func (UnimplementedCompanyServiceServer) UpdateCompanyProduct(context.Context, *UpdateCompanyProductRequest) (*UpdateCompanyProductResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCompanyProduct not implemented")
}
func (UnimplementedCompanyServiceServer) DeleteCompanyProduct(context.Context, *DeleteCompanyProductRequest) (*DeleteCompanyProductResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCompanyProduct not implemented")
}
func (UnimplementedCompanyServiceServer) ListCompanyReviews(context.Context, *ListCompanyReviewsRequest) (*ListCompanyReviewsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCompanyReviews not implemented")
}
func (UnimplementedCompanyServiceServer) CreateCompanyReview(context.Context, *CreateCompanyReviewRequest) (*CreateCompanyReviewResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCompanyReview not implemented")
}
func (UnimplementedCompanyServiceServer) ListProductReviews(context.Context, *ListProductReviewsRequest) (*ListProductReviewsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProductReviews not implemented")
}
func (UnimplementedCompanyServiceServer) CreateProductReview(context.Context, *CreateProductReviewRequest) (*CreateProductReviewResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProductReview not implemented")
}
func (UnimplementedCompanyServiceServer) mustEmbedUnimplementedCompanyServiceServer() {}
func (UnimplementedCompanyServiceServer) testEmbeddedByValue()                        {}

// UnsafeCompanyServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CompanyServiceServer will
// result in compilation errors.
type UnsafeCompanyServiceServer interface {
	mustEmbedUnimplementedCompanyServiceServer()
}

func RegisterCompanyServiceServer(s grpc.ServiceRegistrar, srv CompanyServiceServer) {
	// If the following call pancis, it indicates UnimplementedCompanyServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CompanyService_ServiceDesc, srv)
}

func _CompanyService_ListCompany_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCompanyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).ListCompany(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CompanyService_ListCompany_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).ListCompany(ctx, req.(*ListCompanyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyService_GetCompany_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCompanyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).GetCompany(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CompanyService_GetCompany_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).GetCompany(ctx, req.(*GetCompanyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyService_ListCompanyProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCompanyProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).ListCompanyProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CompanyService_ListCompanyProduct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).ListCompanyProduct(ctx, req.(*ListCompanyProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyService_CreateCompanyProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCompanyProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).CreateCompanyProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CompanyService_CreateCompanyProduct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).CreateCompanyProduct(ctx, req.(*CreateCompanyProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyService_UpdateCompanyProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCompanyProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).UpdateCompanyProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CompanyService_UpdateCompanyProduct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).UpdateCompanyProduct(ctx, req.(*UpdateCompanyProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyService_DeleteCompanyProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCompanyProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).DeleteCompanyProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CompanyService_DeleteCompanyProduct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).DeleteCompanyProduct(ctx, req.(*DeleteCompanyProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyService_ListCompanyReviews_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCompanyReviewsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).ListCompanyReviews(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CompanyService_ListCompanyReviews_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).ListCompanyReviews(ctx, req.(*ListCompanyReviewsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyService_CreateCompanyReview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCompanyReviewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).CreateCompanyReview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CompanyService_CreateCompanyReview_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).CreateCompanyReview(ctx, req.(*CreateCompanyReviewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyService_ListProductReviews_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProductReviewsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).ListProductReviews(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CompanyService_ListProductReviews_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).ListProductReviews(ctx, req.(*ListProductReviewsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyService_CreateProductReview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProductReviewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).CreateProductReview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CompanyService_CreateProductReview_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).CreateProductReview(ctx, req.(*CreateProductReviewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CompanyService_ServiceDesc is the grpc.ServiceDesc for CompanyService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CompanyService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "company.CompanyService",
	HandlerType: (*CompanyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListCompany",
			Handler:    _CompanyService_ListCompany_Handler,
		},
		{
			MethodName: "GetCompany",
			Handler:    _CompanyService_GetCompany_Handler,
		},
		{
			MethodName: "ListCompanyProduct",
			Handler:    _CompanyService_ListCompanyProduct_Handler,
		},
		{
			MethodName: "CreateCompanyProduct",
			Handler:    _CompanyService_CreateCompanyProduct_Handler,
		},
		{
			MethodName: "UpdateCompanyProduct",
			Handler:    _CompanyService_UpdateCompanyProduct_Handler,
		},
		{
			MethodName: "DeleteCompanyProduct",
			Handler:    _CompanyService_DeleteCompanyProduct_Handler,
		},
		{
			MethodName: "ListCompanyReviews",
			Handler:    _CompanyService_ListCompanyReviews_Handler,
		},
		{
			MethodName: "CreateCompanyReview",
			Handler:    _CompanyService_CreateCompanyReview_Handler,
		},
		{
			MethodName: "ListProductReviews",
			Handler:    _CompanyService_ListProductReviews_Handler,
		},
		{
			MethodName: "CreateProductReview",
			Handler:    _CompanyService_CreateProductReview_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "company/company.proto",
}
